// Code generated by codecgen - DO NOT EDIT.

package drilling

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
	"time"
)

const (
	// ----- content types ----
	codecSelferCcUTF82118 = 1
	codecSelferCcRAW2118  = 255
	// ----- value types used ----
	codecSelferValueTypeArray2118  = 10
	codecSelferValueTypeMap2118    = 9
	codecSelferValueTypeString2118 = 6
	codecSelferValueTypeInt2118    = 2
	codecSelferValueTypeUint2118   = 3
	codecSelferValueTypeFloat2118  = 4
	codecSelferBitsize2118         = uint8(32 << (^uint(0) >> 63))
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct2118 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer2118 struct{}

func init() {
	if codec1978.GenVersion != 10 {
		_, file, _, _ := runtime.Caller(0)
		panic("codecgen version mismatch: current: 10, need " + strconv.FormatInt(int64(codec1978.GenVersion), 10) + ". Re-generate file: " + file)
	}
	if false {
		var _ byte = 0 // reference the types, but skip this branch at build/run time
		var v0 time.Time
		_ = v0
	}
}

func (x *TestingEvent) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2118
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				r.WriteMapStart(5)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Id))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"id\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF82118, `id`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Id))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Kind))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"kind\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF82118, `kind`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Kind))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt10 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt10 != nil {
					z.EncExtension(x.CreatedAt, yyxt10)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeStringEnc(codecSelferCcUTF82118, `created_at`)
				r.WriteMapElemValue()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt11 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt11 != nil {
					z.EncExtension(x.CreatedAt, yyxt11)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.Target)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF82118, string(x.Target))
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"target\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF82118, `target`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.Target)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF82118, string(x.Target))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.Source)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF82118, string(x.Source))
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"source\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF82118, `source`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.Source)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF82118, string(x.Source))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *TestingEvent) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2118
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2118 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2118 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2118)
		}
	}
}

func (x *TestingEvent) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2118
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.Id = 0
			} else {
				x.Id = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2118))
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = 0
			} else {
				x.Kind = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2118))
			}
		case "created_at":
			if r.TryDecodeAsNil() {
				x.CreatedAt = time.Time{}
			} else {
				if false {
				} else if !z.DecBasicHandle().TimeNotBuiltin {
					x.CreatedAt = r.DecodeTime()
				} else if yyxt7 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt7 != nil {
					z.DecExtension(x.CreatedAt, yyxt7)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(&x.CreatedAt)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(&x.CreatedAt)
				} else {
					z.DecFallback(&x.CreatedAt, false)
				}
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ""
			} else {
				x.Target = (string)(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = ""
			} else {
				x.Source = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *TestingEvent) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2118
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Id = 0
	} else {
		x.Id = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2118))
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Kind = 0
	} else {
		x.Kind = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2118))
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.CreatedAt = time.Time{}
	} else {
		if false {
		} else if !z.DecBasicHandle().TimeNotBuiltin {
			x.CreatedAt = r.DecodeTime()
		} else if yyxt14 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt14 != nil {
			z.DecExtension(x.CreatedAt, yyxt14)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(&x.CreatedAt)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(&x.CreatedAt)
		} else {
			z.DecFallback(&x.CreatedAt, false)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Target = ""
	} else {
		x.Target = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Source = ""
	} else {
		x.Source = (string)(r.DecodeString())
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadArrayEnd()
}
